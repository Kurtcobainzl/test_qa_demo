package algorithm;

import org.w3c.dom.NodeList;

public class MinestNum {

    public static void main(String[] args) {
//        System.out.println(firstMissingPositive(new int[]{1, 5, 12, 8, 9}));
//        System.out.println(firstMissingPositive(new int[]{5, 3, 2, 4, 1}));

        for (int i = 0; i < 1000; i++) {
            long time1 = System.currentTimeMillis();
            firstMissingPositive(new int[]{-1, 3, 2, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13});
            long time2 = System.currentTimeMillis();
            fun(new int[]{-1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, -1, 3, 2, 4, 6, 9, 10, 0, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13, -1, 3, 2, 4, 6, 9, 10, 0, 13});
            long time3 = System.currentTimeMillis();
            System.out.println((time2 - time1) + "---" + (time3 - time2));
            System.out.println();
        }

    }


    public static int firstMissingPositive(int[] nums) {
        int n = nums.length;
        for (int i = 0; i < n; ++i) {
            if (nums[i] <= 0) {
                nums[i] = n + 1;
            }
        }
        for (int i = 0; i < n; ++i) {
            int num = Math.abs(nums[i]);
            if (num <= n) {
                nums[num - 1] = -Math.abs(nums[num - 1]);
            }
        }
        for (int i = 0; i < n; ++i) {
            if (nums[i] > 0) {
                return i + 1;
            }
        }
        return n + 1;
    }


    public static int fun(int[] nums) {
        int[] newArr = new int[nums.length];
        for (int i : nums) {
            if (i <= 0 || i > nums.length)
                continue;
            newArr[i - 1] = i;
        }
        for (int i = 0; i < newArr.length; i++) {
            if (newArr[i] == 0)
                return i + 1;
        }
        return newArr.length + 1;
    }
}
